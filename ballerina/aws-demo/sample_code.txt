@kubernetes:ConfigMap {
    conf: "ballerina.conf"
}

@kubernetes:Deployment {
    dockerHost: "tcp://192.168.99.102:2376", 
    dockerCertPath: "/home/laf/.minikube/certs"
}

az aks get-credentials --resource-group connector --name k8stest1

@kubernetes:Deployment {
    image: "$env{docker_username}/awsdemo-$env{GITHUB_SHA}",
    push: true,
    username: "$env{docker_username}",
    password: "$env{docker_password}",
    imagePullPolicy: "Always"
}

curl --data-binary "@input.jpeg" http://192.168.99.102:30135/process

curl --data-binary "@input.jpeg" http://localhost:8080/process

arn:aws:iam::908363916138:role/lambda-role

// update external IP in prom config and grafana prom data source

docker run -p 9090:9090 -v /home/laf/dev/samples/ballerina/aws-demo/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus

docker run -p 3000:3000 grafana/grafana

docker run -p 5775:5775/udp -p6831:6831/udp -p6832:6832/udp -p5778:5778 -p16686:16686 -p14268:14268 jaegertracing/all-in-one:latest

http://localhost:3000/

https://grafana.com/dashboards/5841

http://localhost:16686/

ballerina run demo.bal --b7a.observability.enabled=true

https://github.com/lafernando/ballerina-k8s-actions-sample
https://github.com/lafernando/lambda-actions-example
https://github.com/lafernando/module-azurecv

============================================================

import ballerina/http;
import wso2/amazonrekn;
import ballerina/config;
import ballerina/kubernetes;

amazonrekn:Configuration conf = {
    secretKey: config:getAsString("SK"),
    accessKey: config:getAsString("AK")
};

amazonrekn:Client reknClient = new(conf);

@kubernetes:ConfigMap {
    conf: "ballerina.conf"
}
@kubernetes:Service {
    serviceType: "LoadBalancer",
    port: 80
}
@kubernetes:Deployment {
    push: true,
    image: "$env{docker_username}/ocr1",
    username: "$env{docker_username}",
    password: "$env{docker_password}"
}
@http:ServiceConfig {
    basePath: "/"
}
service ocrservice on new http:Listener(8080) {

    @http:ResourceConfig {
        path: "/process",
        methods: ["POST"]
    }
    resource function process(http:Caller caller, http:Request request) returns error? {
        byte[] payload = check request.getBinaryPayload();
        var response = reknClient->detectText(<@untainted> payload);
        if response is string {
            check caller->respond(response);
        } else {
            check caller->respond("Error: " + response.toString());
        }
    }

}

========================

import ballerinax/awslambda;
import ballerina/system;

# Generate UUID.
#
# + input - input data
# + return - UUID string
@awslambda:Function
public function uuid(awslambda:Context ctx, json input) returns json|error {
    return "XXX:" + system:uuid();
}

=========================

