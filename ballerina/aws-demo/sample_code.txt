@kubernetes:ConfigMap {
    conf: "ballerina.conf"
}

@kubernetes:Deployment {
    dockerHost: "tcp://192.168.99.100:2376", 
    dockerCertPath: "/home/laf/.minikube/certs"
}

az aks get-credentials --resource-group connector --name k8stest1

@kubernetes:Deployment {
    image: "$env{docker_username}/awsdemo-$env{GITHUB_SHA}",
    push: true,
    username: "$env{docker_username}",
    password: "$env{docker_password}",
    imagePullPolicy: "Always"
}

curl --data-binary "@input.jpeg" http://192.168.99.102:30135/process

curl --data-binary "@input.jpeg" http://localhost:8080/process

arn:aws:iam::908363916138:role/lambda-role

// update external IP in prom config and grafana prom data source

sudo docker run -p 19090:9090 -v /home/laf/dev/samples/ballerina/aws-demo/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus

sudo docker run -p 3000:3000 grafana/grafana

https://grafana.com/dashboards/5841

ballerina run demo.bal --b7a.observability.enabled=true

============================================================import ballerina/http;
import wso2/amazonrekn;
import ballerina/config;
import ballerina/io;

amazonrekn:Configuration conf = {
    // AK and SK can be given as envionment variables
    // or else can be passed in from a configuration file
    accessKey: config:getAsString("AK"),
    secretKey: config:getAsString("SK")
};

amazonrekn:Client amzonrekn = new(conf);

@http:ServiceConfig {
    basePath: "/"
}
service myservice on new http:Listener(8080) {

    @http:ResourceConfig {
        methods: ["POST"],
        path: "process"
    }
    resource function myprocess(http:Caller caller, http:Request request) returns error? {
        byte[] payload = check request.getBinaryPayload();
        string result = check amzonrekn->detectText(<@untainted> payload);
        error? err = caller->respond(result);
        if (err is error) {
            io:println("Error: " , err);
        }
    }

}

========================

import ballerinax/awslambda;
import ballerina/system;

# Generate UUID.
#
# + input - input data
# + return - UUID string
@awslambda:Function
public function uuid(awslambda:Context ctx, json input) returns json|error {
    return "XXX:" + system:uuid();
}

=========================

