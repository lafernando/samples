@kubernetes:ConfigMap {
    conf: "ballerina.conf"
}

@kubernetes:Deployment {
    dockerHost: "tcp://192.168.99.100:2376", 
    dockerCertPath: "/home/laf/.minikube/certs"
}

curl --data-binary "@input.jpeg" http://192.168.99.102:30135/process

curl --data-binary "@input.jpeg" http://localhost:8080/process

arn:aws:iam::908363916138:role/lambda-role

aws lambda create-function --function-name uuid --zip-file fileb://aws-ballerina-lambda-functions.zip --handler functions.uuid --runtime provided --role arn:aws:iam::908363916138:role/lambda-role --timeout 10 --memory-size 1024

aws lambda update-function-configuration --function-name uuid --layers arn:aws:lambda:us-west-1:141896495686:layer:ballerina-0-990-3:4

aws lambda update-function-code --function-name uuid --zip-file fileb://aws-ballerina-lambda-functions.zip

============================================================
import ballerina/http;
import ballerina/config;
import ballerina/kubernetes;
import wso2/amazonrekn;

amazonrekn:Configuration config = {
    accessKey: config:getAsString("AK"),
    secretKey: config:getAsString("SK")
};

amazonrekn:Client reknClient = new(config);

@http:ServiceConfig {
    basePath: "/"
}
@kubernetes:Service {
    serviceType: "NodePort" 
}
@kubernetes:Deployment {
    dockerHost: "tcp://192.168.99.102:2376", 
    dockerCertPath: "/home/laf/.minikube/certs"
}
@kubernetes:ConfigMap {
    conf: "ballerina.conf"
}
service myservice on new http:Listener(9090) {

    @http:ResourceConfig {
        path: "process"
    }
    resource function doit(http:Caller caller, http:Request request) returns error? {
        var input = request.getBinaryPayload();
        if (input is byte[]) {
            var result = reknClient->detectText(<@untainted> input);
            if (result is string) {
                check caller->respond(result);
            }
        }
    }

}

========================

import ballerinax/awslambda;
import ballerina/system;

# Generate UUID.
#
# + input - input data
# + return - UUID string
@awslambda:Function
public function uuid(awslambda:Context ctx, json input) returns json|error {
    return "XXX:" + system:uuid();
}

=========================

