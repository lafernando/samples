import ballerina/grpc;
import ballerina/system;

listener grpc:Listener ep = new (9090);

map<Person> personMap = {};

service AdminService on ep {

    resource function add(grpc:Caller caller, AddRequest value) returns error? {
        check caller->send(value.numbers.reduce(function (int n, int i) returns int => n + i, 0));
        check caller->complete();
    }

    resource function multiply(grpc:Caller caller, MultiplyRequest value) returns error? {
        check caller->send(value.v1 + value.v2);
        check caller->complete();
    }

    resource function addPerson(grpc:Caller caller, Person value) returns error? {
        value.id = system:uuid();
        personMap[value.id] = <@untainted> value;
        check caller->send(value.id);
        check caller->complete();
    }

    resource function getPerson(grpc:Caller caller, GetPersonRequest value) returns error? {
        check caller->send(personMap[value.id]);
        check caller->complete();
    }
    
}

public type AddRequest record {|
    int[] numbers = [];
    
|};

public type MultiplyResponse record {|
    int result = 0;
    
|};

public type GetPersonRequest record {|
    string id = "";
    
|};

public type AddResponse record {|
    int result = 0;
    
|};

public type AddPersonResponse record {|
    string id = "";
    
|};

public type Person record {|
    string id = "";
    string name = "";
    int birthYear = 0;
    
|};

public type MultiplyRequest record {|
    int v1 = 0;
    int v2 = 0;
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "admin.proto
        
    };
}

